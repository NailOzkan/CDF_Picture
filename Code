import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import numpy as np
import pandas as pd

from skimage.io import imshow, imread
from skimage.color import rgb2gray
from skimage import img_as_ubyte, img_as_float
from skimage.exposure import histogram, cumulative_distribution

# resmimizi ekliyoruz ve matrisini gösteriyoruz
img = mpimg.imread('test.png')
print(img)
imgplot = plt.imshow(img)
plt.show()

# resmi gri tona döndürüyoruz
plt.figure(num=None, figsize=(8, 6), dpi=80)
dark_image_grey = img_as_ubyte(rgb2gray(img))
plt.imshow(dark_image_grey)
plt.show()


freq, bins = histogram(dark_image_grey)
plt.figure(num=None, figsize=(8, 6), dpi=100, facecolor='white')
freq, bins = histogram(dark_image_grey)
plt.step(bins, freq / freq.sum())
plt.xlabel('intensity value', fontsize=12)
plt.ylabel('fraction of pixels', fontsize=12)
plt.show()

freq, bins = cumulative_distribution(dark_image_grey)
target_bins = np.arange(255)
target_freq = np.linspace(0, 1, len(target_bins))
interpolation = np.interp(freq, target_freq, target_bins)
dark_image_eq = img_as_ubyte(interpolation[dark_image_grey].astype(int))
freq_adj, bins_adj = cumulative_distribution(dark_image_eq)

fig, axes = plt.subplots(1, 2, figsize=(15, 7));
imshow(dark_image_grey, ax=axes[0])
imshow(dark_image_eq, ax=axes[1])


axes[0].axis('off')
axes[1].axis('off')
axes[0].set_title('Unadjusted Image', fontsize=17)
axes[1].set_title('Adjusted Image', fontsize=17)

fig, axes = plt.subplots(1, 1, figsize=(19, 7));
plt.step(bins, freq, c='blue', label='Actual CDF')
plt.step(bins_adj, freq_adj, c='purple', label='Adjusted CDF')
plt.plot(target_bins,
         target_freq,
         c='red',
         label='Target CDF',
         linestyle='--')

plt.legend(prop={'size': 14})
plt.xlim(0, 255)
plt.ylim(0, 1)
plt.xlabel('Intensity values', fontsize=15)
plt.ylabel('Cumulative fraction of pixels', fontsize=15)
plt.show()


plt.step(bins, freq / freq.sum())
plt.xlabel('intensity value', fontsize=12)
plt.ylabel('fraction of pixels', fontsize=12)
plt.show()
imshow(dark_image_eq);
plt.show()

freq_adj, bins_adj = cumulative_distribution(dark_image_eq)












